plugins {
    id 'org.springframework.boot' version '3.4.6'
    id 'io.spring.dependency-management' version '1.1.7'
    id "io.freefair.lombok" version '8.13.1'
    id 'org.jreleaser' version '1.18.0'
    id 'maven-publish'
    id 'signing'
    id 'java-library'
    id 'application'
    id 'idea'
}

group = 'com.houkunlin'
version = '1.0.12-SNAPSHOT'
description = """
常用的 AOP 注解功能。
Commonly used AOP annotation features.
"""

def gitRepo = "github.com/houkunlin-starter/system-common-aop-starter.git"
def isSnapshot = findProperty("snapshot") != null || version.endsWith('SNAPSHOT')

if (isSnapshot && !version.endsWith('SNAPSHOT')) {
    version += '-BUILD-SNAPSHOT'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven {
        url = "https://repo.spring.io/artifactory/libs-milestone-local/"
    }
    maven {
        url = "https://repo.spring.io/artifactory/libs-release-local/"
    }
}

dependencies {
    testImplementation 'cn.hutool:hutool-extra:5.8.36'
    // 模板引擎
    testImplementation 'org.freemarker:freemarker:2.3.33'
    testImplementation 'com.ibeetl:beetl:3.16.2.RELEASE'
    testImplementation 'com.jfinal:enjoy:5.1.3'
    testImplementation 'org.rythmengine:rythm-engine:1.4.2'
    testImplementation 'org.apache.velocity:velocity-engine-core:2.3'
    testImplementation 'org.thymeleaf:thymeleaf:3.1.2.RELEASE'
    testImplementation 'com.github.subchen:jetbrick-template:2.1.10'
    testImplementation 'org.febit.wit:wit-core:2.7.0-beta'
    testImplementation 'org.febit.wit:wit-tools:2.7.0-beta'
    // 表达式引擎
    testImplementation 'com.googlecode.aviator:aviator:5.4.3'
    testImplementation('org.apache.commons:commons-jexl3:3.4.0') {
        exclude group: 'commons-logging', module: 'commons-logging'
    }
    testImplementation 'org.mvel:mvel2:2.5.2.Final'
    testImplementation 'com.jfirer:jfireEl:1.0'
    testImplementation 'org.mozilla:rhino-engine:1.7.15'
    testImplementation('com.alibaba:QLExpress:3.3.3') {
        exclude group: 'commons-logging', module: 'commons-logging'
    }


    compileOnly 'org.springframework.boot:spring-boot-starter-aop'
    compileOnly 'org.springframework.boot:spring-boot-starter-validation'
    compileOnly 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.springframework.boot:spring-boot-starter-data-redis'
    // easyexcel 不在新增特性了，进入了维护模式，只修复bug
    // compileOnly 'com.alibaba:easyexcel:4.0.3'
    // 因此替换成 easyexcel 原作者新开的项目 https://github.com/CodePhiliaX/fastexcel
    api 'cn.idev.excel:fastexcel:1.0.0'
    // 这个也是一个 Excel 处理工具 https://github.com/wangguanquan/eec
    api 'org.ttzero:eec:0.5.20'
    compileOnly('com.deepoove:poi-tl:1.12.2') {
        exclude group: 'commons-logging', module: 'commons-logging'
    }
    testImplementation 'org.springframework.boot:spring-boot-starter-aop'
    testImplementation 'org.springframework.boot:spring-boot-starter-actuator'
    testImplementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-data-redis'
    testImplementation('com.deepoove:poi-tl:1.12.2') {
        exclude group: 'commons-logging', module: 'commons-logging'
    }
    testImplementation('com.github.fppt:jedis-mock:1.1.2') {
        exclude group: 'org.json', module: 'json'
    }

    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    testImplementation 'org.testng:testng:7.10.2'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
    generatedPomCustomization {
        enabled = false
    }
}

// 获取环境变量信息
def GETENV(name) {
    return findProperty(name) ?: System.getenv(name)
}

// 获取 GPG KEY 信息，并尝试判断是否需要使用 Base64 进行解码数据
def GETGPGKEY(name) {
    String value = GETENV(name)
    if (value == null) {
        return null
    }
    // value.startsWith("-----BEGIN PGP")
    if (value.startsWith("LS0tLS1CRUdJTiBQR1Ag")) {
        return new String(java.util.Base64.getDecoder().decode(value))
    }
    return value
}

publishing {
    publications {
        library(MavenPublication) {
            from components.java
            pom {
                name = project.name
                packaging = 'jar'
                description = project.description
                url = "https://${gitRepo}"
                // properties = []
                licenses {
                    license {
                        name = 'Mulan Permissive Software License，Version 2'
                        url = 'https://license.coscl.org.cn/MulanPSL2'
                    }
                }
                developers {
                    developer {
                        id = 'houkunlin'
                        name = 'HouKunLin'
                        email = 'houkunlin@aliyun.com'
                    }
                }
                scm {
                    connection = "scm:git://${gitRepo}"
                    developerConnection = "scm:git://${gitRepo}"
                    url = "git://${gitRepo}"
                }
            }
        }
    }
    repositories {
        maven {
            name = 'buildDir'
            // 发布到本地路径，在发布到正式仓库时会用到这个步骤的输出内容
            url = layout.buildDirectory.dir('staging-deploy')
        }
    }
}

signing {
    // 使用 gradle.properties 设置参数，或者在命令行中增加 -Pgpg_private_key= -Pgpg_password= 设置参数
    // 或者在环境变量中设置相应的环境变量
    String signingKey = GETGPGKEY("gpg_private_key")
    if (signingKey != null) {
        String signingPassword = GETENV("gpg_password")
        useInMemoryPgpKeys(signingKey, signingPassword)
    }
    sign publishing.publications
}

jreleaser {
    signing {
        active = 'ALWAYS'
        armored = true
        mode = 'MEMORY'
        publicKey = GETGPGKEY("gpg_public_key")
        secretKey = GETGPGKEY("gpg_private_key")
        passphrase = GETENV("gpg_password")
    }
    deploy {
        maven {
            mavenCentral {
                releaseDeployToCentral {
                    active = 'RELEASE'
                    applyMavenCentralRules = true
                    username = GETENV("sonatype_username")
                    password = GETENV("sonatype_password")
                    url = 'https://central.sonatype.com/api/v1/publisher'
                    stagingRepository('build/staging-deploy')
                }
            }
            nexus2 {
                snapshotDeployToCentral {
                    // 发布快照版本
                    // 快照仓库地址：https://central.sonatype.com/service/rest/repository/browse/maven-snapshots/
                    active = 'SNAPSHOT'
                    url = 'https://central.sonatype.com/repository/maven-snapshots/'
                    snapshotUrl = 'https://central.sonatype.com/repository/maven-snapshots/'
                    snapshotSupported = true
                    username = GETENV("sonatype_username")
                    password = GETENV("sonatype_password")
                    stagingRepository('build/staging-deploy')
                    verifyUrl = "https://central.sonatype.com/service/rest/repository/browse/maven-snapshots/{{path}}/{{filename}}"
                }
            }
        }
    }
    release {
        github {
            name = "system-dict-starter"
            repoOwner = "houkunlin-starter"
            skipTag = true
            overwrite = true
            skipRelease = isSnapshot
            username = "houkunlin"
            token = GETENV("GITHUB_TOKEN")
            commitAuthor {
                name = "houkunlin"
                email = "houkunlin@aliyun.com"
            }
        }
    }
}

bootJar {
    enabled = false
}
bootStartScripts {
    enabled = false
}
bootDistTar {
    enabled = false
}
bootDistZip {
    enabled = false
}
startScripts {
    enabled = false
}
distTar {
    enabled = false
}
distZip {
    enabled = false
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

jar {
    enabled = true
    setArchiveClassifier("")
}

java {
    withJavadocJar()
    withSourcesJar()
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

javadoc {
    enabled = true
    options.encoding = "UTF-8"
    options.addStringOption('Xdoclint:none', '-quiet')
}

compileJava {
    options.encoding = "UTF-8"
}

test {
    useJUnitPlatform()
}
